import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign
import javax.swing.*
import groovy.text.SimpleTemplateEngine
import org.kohsuke.github.*

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.kohsuke:github-api:1.90'
    }
}

plugins {
    id 'java'
    
    
    id 'eclipse'
    id 'idea'
    
    id 'signing'
    id 'maven-publish'
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"
    id "com.github.ben-manes.versions" version "0.13.0"
    id "com.jfrog.bintray" version "1.7.2"
    
    id "org.ajoberstar.git-publish" version "0.3.2"
    
    id "net.saliman.properties" version "1.4.6"
    id 'com.github.jk1.dependency-license-report' version '0.3.8'
    
}

project.version.with {
    major = boothubTestVersionMajor as int
    minor= boothubTestVersionMinor as int
    patch = boothubTestVersionPatch as int
    if (project.hasProperty('boothubTestVersionLabel')) {
        preRelease = boothubTestVersionLabel
    }
    releaseBuild = Boolean.valueOf(boothubTestReleaseBuild)
}
ext.boothubTestVersion = project.version as String
ext.boothubTestTag = Boolean.valueOf(boothubTestReleaseBuild) ? "v$ext.boothubTestVersion" : 'master'

def pomConfig = {
    url "https://github.com/Londoner1234/boothubTest"
    developers {
        developer {
            id "Londoner1234"
            name "Thomas Woodhouse"
        }
    }
    scm {
        connection "https://github.com/Londoner1234/boothubTest.git"
        developerConnection "https://github.com/Londoner1234/boothubTest.git"
        url "https://github.com/Londoner1234/boothubTest"
    }
}




group = 'test.boothub.com'
version = boothubTestVersion

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:all,-syntax,-missing', '-quiet')
}






repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

sourceCompatibility = 1.8

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

configurations {
  provided
  compile {transitive = true}
}


signing {
    sign configurations.archives
}

signArchives {
  onlyIf { gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)} }
}

dependencies {
  
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
  
  
  
  
  testCompile 'junit:junit:4.12'
  
  testCompile('ch.qos.logback:logback-classic:1.1.7')
  
}

sourceSets.main.compileClasspath += configurations.provided

jar {
    manifest {
        attributes 'Implementation-Title': "${project.archivesBaseName}",
                'Implementation-Version': boothubTestVersion
    }

    from ("${projectDir}/src/main/java") {
        include('**/*.fxml')
        include('**/*.css')
        include('**/*.png')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: classes) {
    classifier "javadoc"
    from javadoc
}
artifacts {
    (System.getenv("TRAVIS") == "true") ? archives(sourcesJar) : archives(sourcesJar, javadocJar)
}

publishing {
    publications {
        "boothubTest"(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
            artifact javadocJar { classifier "javadoc" }
            groupId 'test.boothub.com'
            artifactId project.name
            version boothubTestVersion
            pom.withXml {
                def root = asNode()
                root.appendNode('name', "Module $project.name")
                root.appendNode('description', "The $project.name artifact")
                root.children().last() + pomConfig

                // We cannot configure the licenses in pomConfig due to a name conflict with the 'license' extension defined by the com.github.hierynomus.license plugin
                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')
            }
        }
    }
}

task "create-dirs" {
    doLast {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
}

eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('0', 'javafx/**'))
            }
        }
        plusConfigurations << configurations.provided
    }
    project {
        file.beforeMerged { project ->
            project.natures.clear()
        }
    }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}
 



artifacts {
    (System.getenv("TRAVIS") == "true") ? archives(sourcesJar) : archives(sourcesJar, javadocJar)
}



configureJavadoc(javadoc)

def configureJavadoc(task) {
  configure(task) {
      title "boothubTest Documentation ($boothubTestVersion)"
      destinationDir file("build/docs/javadoc")
      if(project.configurations.hasProperty('provided')) {
          classpath += project.configurations.provided
      }
      configure(options) {
          links "http://docs.oracle.com/javase/8/docs/api/"
      }
  }
}

task "update-release-list" {
    doLast {
        updateReleaseList('https://Londoner1234.github.io/boothubTest')
    }
}

def updateReleaseList(String docBaseUrl) {
    List<String> releases = getReleases()
    def markdown = getReleasesMarkdown(releases, docBaseUrl)
    def releaseListDir = new File('build/release-list')
    releaseListDir.mkdirs()
    new File(releaseListDir, 'releases.md').write(markdown)
}

def getReleases() {
    GitHub gitHubApi = GitHub.connectUsingPassword(System.getenv('GH_PAGES_ACCESS_TOKEN') ?: '', '')
    def releases = gitHubApi.getOrganization('Londoner1234')
            .getRepository('boothubTest')
            .getDirectoryContent("releases", "gh-pages")*.name
    releases.removeAll { !it || it == 'latest' }
    releases.reverse()
}

def getReleasesMarkdown(List<String> releases, String docBaseUrl) {
    def releasesTemplate = '''
            ## List of all releases ##
            
            **Latest snapshot**
            - [documentation](\u0024docBaseUrl/snapshots/latest)
            - [javadoc](\u0024docBaseUrl/snapshots/latest/javadoc)
            
            <% releases.each { %>**Release \u0024it**
              - [documentation](\u0024docBaseUrl/releases/\u0024it)
              - [javadoc](\u0024docBaseUrl/releases/\u0024it/javadoc)
              
            <% } %>
        '''.stripIndent()

    def engine = new SimpleTemplateEngine()
    def template = engine.createTemplate(releasesTemplate)
    def binding = [
            docBaseUrl: docBaseUrl,
            releases  : releases
    ]

    template.make(binding).toString()
}

def readPasswordFromConsole(title, prompt) {
    JPanel panel = new JPanel()
    JLabel label = new JLabel(prompt)
    JPasswordField pass = new JPasswordField(24)
    panel.add(label)
    panel.add(pass)
    def options = ["OK", "Cancel"] as Object[]
    int option = JOptionPane.showOptionDialog(null, panel, title,
            JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, null)
    if(option != 0) throw new InvalidUserDataException("Operation cancelled by the user.")
    new String(pass.password)
}

def isPublishTask(task) {
  task.name.startsWith('publish')
}

gradle.taskGraph.whenReady { taskGraph ->
    if (gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)}) {
        def password = readPasswordFromConsole('Please enter your signing credentials', 'PGP Private Key Password')
        allprojects { ext."signing.keyId" = signingKeyId }
        allprojects { ext."signing.secretKeyRingFile" = signingSecretKeyRingFile }
        allprojects { ext."signing.password" = password }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : "unknownUser"
    key =  project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : "unknownKey"
    publications = ['boothubTest']
    pkg {
        repo = 'maven'
        name = 'boothubTest'
        userOrg = 'Londoner1234'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/Londoner1234/boothubTest.git'

        version {
                name = boothubTestVersion
                desc = "boothubTest $boothubTestVersion"
                released  = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
                vcsTag = boothubTestVersion
                gpg {
                    sign = true
                }
        }
    }
}
